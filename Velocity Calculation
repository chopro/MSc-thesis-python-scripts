# -*- coding: utf-8 -*-
"""
Created on Tue Oct  7 15:28:13 2014

@author: Tayo
"""

# -*- coding: utf-8 -*-
"""
Created on Wed Jul 16 10:25:05 2014

summary: plot velocity for a particular year, smoothed by linear fit sliding window.

option: p2  - plot one rover of both rovers
input: year - year
input: m1 - month
input: t1 - lower bound domain, day number in year (float)
input: t2 - upper bound domain, day number in year (float)

output: graph of velocity for corresponding dates

@author: Tayo
"""


import numpy
import time       #redundant
import calendar   #redundant
import matplotlib.pyplot
import scipy.ndimage
import re     #to split string by multiple delimeters
from re import split 

from matplotlib.pyplot import plot,figure,show,title,errorbar,ion,ylabel,draw,close,savefig,xlabel,subplots,tight_layout,xlim,ylim,scatter
from numpy import loadtxt,sin,cos,linspace,genfromtxt,array,hstack,vstack,str,arange,sqrt,delete,reshape,resize,squeeze,amax
from matplotlib.ticker import MultipleLocator, FormatStrFormatter, LinearLocator    #to put ticker correctly
from scipy.ndimage import gaussian_filter
from pylab import *     

sys.path.insert(0, '/home/tayo/Master_thesis_FALCON/Python_script/functions/')
from months import MONTHS
sys.path.insert(0, '/home/tayo/Master_thesis_FALCON/Python_script/Breidamerkurjokull/')

close('all') # close all figures to not get 'overplots' from previous figures

if 'V' in locals(): #because data is looped into array the old array is deleted
    del V
if 'X' in locals():
    del X
if 'Y' in locals():
    del Y
if 'W' in locals():
    del W
if 'TT' in locals():
    del TT
if 'uu' in locals():
    del uu


p1=1 
p2=3 #if p=2 plot only once, if p2=3, plot both rovers
year='2010'
for p in range (p1,p2):        
    if p==1:  
        rover='ICEA' 
        rover2 = 'ICEA'
    if p==2:  #if p2=2 then this has no effect
        rover='ICEB'  ##<--- change this one B/D
        rover2 ='ICED' #for programming purpose the name ICEB is converted to ICED
        
    DATA_ROOT = '/home/tayo/Master_thesis_FALCON/Data/Processed_GPS/Breidamerkurjokull/'+rover+'/txt/'
    OUTPUT_ROOT_A = '/home/tayo/Master_thesis_FALCON/Data/Velocity/Breidamerkurjokull/ICEA/'
    OUTPUT_ROOT_D = '/home/tayo/Master_thesis_FALCON/Data/Velocity/Breidamerkurjokull/ICED/'
    
    f = DATA_ROOT+rover+year+'_complete.txt'          #Specify file paths
    g = DATA_ROOT+rover+year+'a_loc_jump.txt'
    loc = genfromtxt(g)                 #Load the text file generated by find_GPS_jump.py
    data = genfromtxt(f)                #Load the text file generated by loaddata.py
    
    t0=240  
    t01=184.58
    
    if year == '2010':
        t1=30.         
        t2=290.
    if year == '2012':
        t1=100.         
        t2=300.
    if year == '2013':    
        t1=30. #70      
        t2=270.     #110
    
    high_res=0   #sets how to save the output. Note that the actual resolution is changed by filter_time
                    # 0: a
                    # 1: h
                    # 2: t
                    # 3: c
    interval=4. #skip every interval data. Choose interval= desired interval in min (10min) / data_jump (in min), 72=data every 3h (180/2,5), 576= every day (use instead velocity_correlation)
        #for tides: interval=24 (once every hour). For tides its not important that they are on 0.125, because tides don't match anyways. It's only to find statistical relation.
        #for velocity correlation=72 (once every three hours and 0.125 appart.)
    
    
    filter_time=24. #0: 24h, #1:6h, #2:2h #3:24h every 3h
    a=3.            #value to exclude outliers (found through trial and error)
    if high_res==0:
        filter_time=24.
        a=3
        interval=4.    
    if high_res==1:
        filter_time=6.
        a=1.8
        interval=12.


    data_jump=2.5/(24.*60.)    #Time step between two data points
    print('data every '+str(data_jump*24.*60.)+' min')
    
    """take the appropriate data"""    
    
    T = data[:,8]       #split the data array into specific arrays
    E = data[:,1]    
    N = data[:,2]    
    U = data[:,3]    
    dX = data[:,4]    
    dY = data[:,5]    
    dZ = data[:,6]    
    M = data[:,7]
        
 
    """Coordinates"""
   
    
    E=E-E[0]                #because of the chosen coordinate system it is easier to see the movement when only compared to where the rover began that month
    E=E-amin(E)             #This is needed include data after the GPS is suddenly moved. I truly have no idea why I have to do this, but through trial and error I found out that this plots the right velocities.
    N=N-N[0]
    N=N-amax(N)
    D = sqrt((E*E+N*N))     #Total displacement by Pythagoras
    U=U-U[0]
    B=U
    
    dt=(filter_time/24.)/2  #amplitude of sliding window

    Nstart=int(dt/data_jump)#the sliding window starts at Nstart
    
      
    """loop to exclude data jumps""" 
     
    for z in range (1,len(loc)):
    
        start=int((loc[z-1]+Nstart)/interval)
        end=int((loc[z]-Nstart)/interval)
        if end<start:
            start=0
            end=0
           
        print('start '+str(start))                
        print('end '+str(end))

                 
        X0=array([9])
        X0.resize((len(X0),1))

        for w in range (start,end): 

            T_middle = T[interval*w]
            T_up=T_middle+dt
            T_down=T_middle-dt
            dT = T[(T<=T_up) & (T>=T_down)]
            dD = D[(T<=T_up) & (T>=T_down)]
            
            fit = polyfit(dT,dD,1)
            Vadd = fit[0]
            
            
            dB = B[(T<=T_up) & (T>=T_down)]
            
            
            if len(dT)>((2*dt)/(data_jump))/a: #to remove bad data points that produce a fit fit from too few data points 
                
                fit = polyfit(dT,dB,1)
                Wadd = fit[0]
            else:
                Wadd = 2000.                   #this need only to be done once because you can remove all the data in the end
                            
            """adjust size to equal length""" 
            TTadd = T[interval*w] 
            
            """ """
            
            if int(w/1000.)==w/1000.:
                print(w)                #print progress
            
            if 'TT' in locals(): 
                TT = vstack((TT,TTadd))        
            else:
                TT = vstack((X0,TTadd)) 
            
            if 'V' in locals():             
                V = vstack((V,Vadd))        
            else:
                V = vstack((X0,Vadd)) 
            
            if 'W' in locals():
                W = vstack((W,Wadd))  
            else:
                W = vstack((X0,Wadd)) 


            
    TT.resize((len(TT),))
    V.resize((len(V),))
    W.resize((len(W),))

    
    TT = TT[1:]
    V = V[1:]
    W = W[1:]

        

    V=V[(W<1000.)]
    TT=TT[(W<1000.)]
    W=W[(W<1000.)]  
    
    Tfull = arange(TT[0],TT[-1],data_jump*interval)
    Tfull.resize((len(Tfull),))
    
    X = Tfull   
    Y = interp(Tfull,TT,V)
    Y2 = interp(Tfull,TT,W)
  
    if year=='2013' and rover=='ICED':  #To only plot data and not the long interpolation inbewteen
        Ya=Y[(X<=96.44)]
        Yb=Y[(X>=198.6)]
        Y=hstack((Ya,Yb))
        Y2a=Y2[(X<=96.44)]
        Y2b=Y2[(X>=198.6)]
        Y2=hstack((Y2a,Y2b))
        Xa=X[(X<=96.44)]
        Xb=X[(X>=198.6)]
        X=hstack((Xa,Xb))
    if year=='2012' and rover=='ICEA':            
        V=V[(TT>=t0)]
        W=W[(TT>=t0)]        
        TT=TT[(TT>=t0)]
        
        Y = Y[(X>=t0)]
        Y2 = Y2[(X>=t0)]
        X = X[(X>=t0)]
    if year=='2010' and rover=='ICEA':            
        V=V[(TT>=t01)]
        W=W[(TT>=t01)]        
        TT=TT[(TT>=t01)]
        
        Y = Y[(X>=t01)]
        Y2 = Y2[(X>=t01)]
        X = X[(X>=t01)]
        
    "plot"    
        
    xlbl = 'Days of '+year
    ylbl = 'Velocity (m/day)'
#    errorbar(X,Y,yerr=Yerror,xerr=None,fmt='.',markersize=3,label=rover) #plot function with error. Label is needed for legend.
    
    

#==============================================================================
#     x_vert = array([X[0],X[-1]])
#     y_vert = array([0,0])
#     x_hor = array([X[0],X[-1]])
#     y_hor = array([1,1])
#==============================================================================
        
            
    if p==1:    
        fig = figure(figsize=(18.5,10.5))
        ax = fig.add_subplot(111)        
        ax.scatter(X,Y,s=3,marker='.',color='gray')
        ax.scatter(TT,V,s=3,marker='.',color='black',label=rover+' horizontal (black top)')
        ax.scatter(X,Y2,s=3,marker='.',color='gray')
        ax.scatter(TT,W,s=3,marker='.',color='black',label=rover+' vertical (black bottom)')
        ax.plot()
        legend(loc=2)
        xlabel(xlbl)
        ylabel(ylbl)    
        xlim(t1,t2)             
        show()
        
    else:
        ax.scatter(X,Y,s=3,marker='.',color='cyan')
        ax.scatter(TT,V,s=3,marker='.',color='blue',label=rover+' horizontal (blue top)')
        ax.scatter(X,Y2,s=3,marker='.',color='cyan')
        ax.scatter(TT,W,s=3,marker='.',color='blue',label=rover+' vertical (blue bottom)')
#        ax.plot(x_hor,y_hor,x_vert,y_vert)
        ax.plot()
        legend(loc=2)
        xlabel(xlbl)
        ylabel(ylbl)    
        xlim(t1,t2)             
        show()


    if p2==3:
        title(year+' '+'ICEA and ICED'+' velocities')        #If double plot, change the name on the title appropriately
    else:
        title(year+' '+rover+' velocity in horizontal plane')          #If single plot, title name
    
    if p==1:    
        TT_A = TT
        Tfull_A = Tfull
        velocity_interp_A = vstack((X,Y)).T
        velocity_data_A = vstack((TT,V)).T
        vertical_interp_A = vstack((X,Y2)).T
        vertical_data_A = vstack((TT,W)).T
    if p==2:
        TT_D = TT
        Tfull_D = Tfull
        velocity_interp_D = vstack((X,Y)).T
        velocity_data_D = vstack((TT,V)).T
        vertical_interp_D = vstack((X,Y2)).T
        vertical_data_D = vstack((TT,W)).T    

    del M,V,D    #delete date to not get overload of memory
    del X,Y,T,E,N,U,W,Y2,B,dX,dY,dZ,data,Tfull,TT

"--------for 2010: change ICE-A in ICE-D and vice versa-------------"
    
if year=='2010':
    tj=t01 #tjump
    
    #horizontal
    velocity_interp_D_1=velocity_interp_D[(Tfull_D>t1) & (Tfull_D<tj)]
    velocity_data_D_1=velocity_data_D[(TT_D>t1) & (TT_D<tj)]
    
    velocity_interp_D_new = vstack((velocity_interp_D_1,velocity_interp_A)) #n=new
    velocity_data_D_new = vstack((velocity_data_D_1,velocity_data_A)) #n=new
    
    velocity_interp_A_new=velocity_interp_D[(Tfull_D>tj) & (Tfull_D<t2)]
    velocity_data_A_new=velocity_data_D[(TT_D>tj) & (TT_D<t2)]

    
    #vertical
    vertical_interp_D_1=vertical_interp_D[(Tfull_D>t1) & (Tfull_D<tj)]
    vertical_data_D_1=vertical_data_D[(TT_D>t1) & (TT_D<tj)]
     
    vertical_interp_D_new = vstack((vertical_interp_D_1,vertical_interp_A)) #n=new
    vertical_data_D_new = vstack((vertical_data_D_1,vertical_data_A)) #n=new
    
    vertical_interp_A_new=vertical_interp_D[(Tfull_D>tj) & (Tfull_D<t2)]
    vertical_data_A_new=vertical_data_D[(TT_D>tj) & (TT_D<t2)]
    
else: 
    velocity_interp_A_new = velocity_interp_A
    velocity_data_A_new = velocity_data_A
    vertical_interp_A_new = vertical_interp_A
    vertical_data_A_new = vertical_data_A
    velocity_interp_D_new = velocity_interp_D
    velocity_data_D_new = velocity_data_D
    vertical_interp_D_new = vertical_interp_D
    vertical_data_D_new = vertical_data_D
    
show()
overwrite = input("do you want to overwrite files? (YES=1):")
overwrite = float(overwrite)
if overwrite==1:
    print ("overwriting files") 
    if high_res==0:
        if p1==1:
            savetxt(OUTPUT_ROOT_A+'ICEA'+year+'a_velocity_interp.txt', velocity_interp_A_new)
            savetxt(OUTPUT_ROOT_A+'ICEA'+year+'a_velocity_data.txt', velocity_data_A_new)
            savetxt(OUTPUT_ROOT_A+'ICEA'+year+'a_vertical_interp.txt', vertical_interp_A_new)
            savetxt(OUTPUT_ROOT_A+'ICEA'+year+'a_vertical_data.txt', vertical_data_A_new)
        if p2==3:
            savetxt(OUTPUT_ROOT_D+'ICED'+year+'a_velocity_interp.txt', velocity_interp_D_new)
            savetxt(OUTPUT_ROOT_D+'ICED'+year+'a_velocity_data.txt', velocity_data_D_new)
            savetxt(OUTPUT_ROOT_D+'ICED'+year+'a_vertical_interp.txt', vertical_interp_D_new)
            savetxt(OUTPUT_ROOT_D+'ICED'+year+'a_vertical_data.txt', vertical_data_D_new)
    if high_res==1:
        if p1==1:
            savetxt(OUTPUT_ROOT_A+'ICEA'+year+'h_velocity_interp.txt', velocity_interp_A_new)
            savetxt(OUTPUT_ROOT_A+'ICEA'+year+'h_velocity_data.txt', velocity_data_A_new)
            savetxt(OUTPUT_ROOT_A+'ICEA'+year+'h_vertical_interp.txt', vertical_interp_A_new)
            savetxt(OUTPUT_ROOT_A+'ICEA'+year+'h_vertical_data.txt', vertical_data_A_new)
        if p2==3:
            savetxt(OUTPUT_ROOT_D+'ICED'+year+'h_velocity_interp.txt', velocity_interp_D_new)
            savetxt(OUTPUT_ROOT_D+'ICED'+year+'h_velocity_data.txt', velocity_data_D_new)
            savetxt(OUTPUT_ROOT_D+'ICED'+year+'h_vertical_interp.txt', vertical_interp_D_new)
            savetxt(OUTPUT_ROOT_D+'ICED'+year+'h_vertical_data.txt', vertical_data_D_new)        
    if high_res==2:
        savetxt(OUTPUT_ROOT_A+'ICEA'+year+'t_velocity_interp.txt', velocity_interp_A_new)
        savetxt(OUTPUT_ROOT_A+'ICEA'+year+'t_velocity_data.txt', velocity_data_A_new)
        savetxt(OUTPUT_ROOT_A+'ICEA'+year+'t_vertical_interp.txt', vertical_interp_A_new)
        savetxt(OUTPUT_ROOT_A+'ICEA'+year+'t_vertical_data.txt', vertical_data_A_new)
        savetxt(OUTPUT_ROOT_D+'ICED'+year+'t_velocity_interp.txt', velocity_interp_D_new)
        savetxt(OUTPUT_ROOT_D+'ICED'+year+'t_velocity_data.txt', velocity_data_D_new)
        savetxt(OUTPUT_ROOT_D+'ICED'+year+'t_vertical_interp.txt', vertical_interp_D_new)
        savetxt(OUTPUT_ROOT_D+'ICED'+year+'t_vertical_data.txt', vertical_data_D_new)
    if high_res==3:
        savetxt(OUTPUT_ROOT_A+'ICEA'+year+'c_velocity_interp.txt', velocity_interp_A_new)
        savetxt(OUTPUT_ROOT_A+'ICEA'+year+'c_velocity_data.txt', velocity_data_A_new)
        savetxt(OUTPUT_ROOT_A+'ICEA'+year+'c_vertical_interp.txt', vertical_interp_A_new)
        savetxt(OUTPUT_ROOT_A+'ICEA'+year+'c_vertical_data.txt', vertical_data_A_new)
        savetxt(OUTPUT_ROOT_D+'ICED'+year+'c_velocity_interp.txt', velocity_interp_D_new)
        savetxt(OUTPUT_ROOT_D+'ICED'+year+'c_velocity_data.txt', velocity_data_D_new)
        savetxt(OUTPUT_ROOT_D+'ICED'+year+'c_vertical_interp.txt', vertical_interp_D_new)
        savetxt(OUTPUT_ROOT_D+'ICED'+year+'c_vertical_data.txt', vertical_data_D_new)


#savefig(OUTPUT_ROOT+'Velocity_'+year+'.png')    
