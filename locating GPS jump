# -*- coding: utf-8 -*-
"""
Created on Sat Oct 11 15:47:34 2014

@author: Tayo
"""

import numpy
import matplotlib.pyplot
import re     #to split string by multiple delimeters
from re import split 

from matplotlib.pyplot import *
from numpy import *
from matplotlib.ticker import MultipleLocator, FormatStrFormatter, LinearLocator    #to put ticker correctly
from pylab import *

year='2013'
rover='ICEA'

DATA_ROOT = '/home/tayo/Master_thesis_FALCON/Data/Processed_GPS/Breidamerkurjokull/'+rover+'/txt/'
OUTPUT_ROOT = '/home/tayo/Master_thesis_FALCON/Data/Processed_GPS/Breidamerkurjokull/'+rover+'/txt/'
    
f = DATA_ROOT+rover+year+'acomplete.txt'          #Specify file path for 2010: complete2 ------- kan ook voor _smooth.txt
data = genfromtxt(f)                #Load the text file generated by loaddata.py
    
T = data[:,0]       #split the data array into specific arrays
E = data[:,1]    
N = data[:,2]    
U = data[:,3]    

E=E-E[0]                #because of the chosen coordinate system it is easier to see the movement when only compared to where the rover began that month
E=E-amin(E)            #This is needed include data after the GPS is suddenly moved. I truly have no idea why I have to do this, but through trial and error I found out that this plots the right velocities.
N=N-N[0]
N=N-amax(N)
D = sqrt((E*E+N*N)) #Total displacement by Pythagoras
U=U-U[0]
B=U

data_jump=(data[10,0]-data[9,0]) 
print('data every '+str(data_jump*24*60)+' min')   

if year=='2010':
    dt_jump=1
    dD_jump=6

if year=='2012':
    dt_jump=1
    dD_jump=6
    
if year=='2013':
    dt_jump=1
    dD_jump=2

if 'loc' in locals():
   del loc    

"""find jump locations"""
ustart=array([0])
ustart.resize((len(ustart),1))    
for u in range (0,len(D)-1):    
    if abs(D[u+1]-D[u])>dD_jump:
        if T[u+1]-T[u] < data_jump+dt_jump+0.0000001 and T[u+1]-T[u] > data_jump-dt_jump-0.0000001:  #only velocity when data step is 10 min (or other data_jump), This makes sure that velocities are not calculated when there is a data gap. 
            uadd=u
            if 'loc' in locals():             #If there is already an array (after having looped one time) the need for a dummy array is not needed
                loc = vstack((loc,uadd))        #stack everything together
            else:
                loc = vstack((ustart,uadd)) 
if 'loc' in locals():
    loc = vstack((loc,len(D)))
    print(loc)
else:
    print('no jumps in '+rover)
    loc = array([0,len(D)])
    

    
savetxt(OUTPUT_ROOT+rover+year+'a_loc_jump_smooth.txt', loc)
